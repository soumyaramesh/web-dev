<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />

    <meta name="viewport"
          content="initial-scale=1, minimum-scale=1">


    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <script src="javascript/angular.js"></script>
    <script src="javascript/angular-sanitize.js"></script>
    <script src="javascript/angular-route.js"></script>
    <script src="javascript/angular-route.min.js"></script>
    
    
    <script src="javascript/exp1.js" type="text/javascript"></script>

    <title> Setting up the Schema </title>



</head>

<body style="background-color:aliceblue" ng-app="RoutingApp">

    <h1 style="color:rosybrown;text-align:center ">Setting up the Schema</h1> 
    <br/>   

   
    <h4>About the Experiment</h4>
    <p>
        This week, I have started working on the components of my project. My project is similar to a web application like Quora or Stackoverflow or reddit where users can post questions, links or other useful information. Other users can view this information and can upvote/downvote, add comments and follow some users. <br/>
        I started off with designing the schema for my database. I require to maintain users, their posts, categories for each post and comments for each post.  In this experiment, I have shown the script for the schema.        
    </p>

<div class="container-fluid">
            <h4>Code Snippet:</h4>

            <pre style="font-size:16px">
<strong>Schema for a user</strong>

var UserSchema = new mongoose.Schema({
    username: {type:String,lowercase: true, unique: true},
    password: String,
    following: [{ type: mongoose.Schema.ObjectId, ref: 'UserModel' }]
});
var UserModel = mongoose.model('UserModel', UserSchema);

<strong>Schema for a post</strong>

var mongoose = require('mongoose');
var PostSchema = new mongoose.Schema({
    title: String,
    content: String,
    upvotes: { type: Number, default: 0 },
    author: { type: mongoose.Schema.Types.ObjectId, ref: 'UserModel' },
    tag: { type: mongoose.Schema.Types.ObjectId, ref: 'TagModel' },
    comments: [{ type: mongoose.Schema.Types.ObjectId, ref: 'CommentModel' }],
});
var PostModel = mongoose.model('PostModel', PostSchema);


<strong>Schema for a comment</strong>

var mongoose = require('mongoose');
var CommentSchema = new mongoose.Schema({
    commentbody: String,
    author: String,
    upvotes: { type: Number, default: 0 },
    post: { type: mongoose.Schema.Types.ObjectId, ref: 'PostModel' }
});

<strong>Schema for a tag</strong>

var TagSchema = new mongoose.Schema({
    tag: { type: String, lowercase: true, unique: true }
});
var TagModel=mongoose.model('TagModel', TagSchema);

   </pre>
        </div>
        <div class="container-fluid">

            <h4>Description :</h4>
            <br />
            <p>
                mongoose.Schema is used to create a new Schema.
                The User Schema records the username, password and a list of users that the current user is following. type: mongoose.Schema.ObjectId, ref: 'UserModel' is used to indicate that the value stored in 'following' refers an object id of type UserSchema. <br/>
                The Post Schema records the post title, content, upvotes, author, tag and comments. The author must be an existing user. <br/>
                The Comment Schema is used to record the comment, author, upvotes and the parent post of the comment. <br/>
                The tag Schema records all the tags that will be displayed for a user to choose from when he enters a new post. If the user wants to enter a new tag, the tag will be recorded in this tag table.
            </p>
        </div>



        <h3>Source Code</h3>
        <a href="../../fileview/Default.aspx?~/experiments/week9/experiment1.htm" target="_blank">experiment1.htm</a><br />
        <a href="../../fileview/Default.aspx?~/experiments/week9/userServer.js" target="_blank">UserSchema</a><br />
        <a href="../../fileview/Default.aspx?~/experiments/week9/postServer.js" target="_blank">PostSchema</a><br />
        <a href="../../fileview/Default.aspx?~/experiments/week9/commentServer.js" target="_blank">CommentSchema</a><br />   
        <a href="../../fileview/Default.aspx?~/experiments/week9/tagServer.js" target="_blank">TagSchema</a><br />     

        <h2>References</h2>
        <a href="https://www.youtube.com/user/jannunzi" target="_blank">Professor Jose's Lectures</a> </br>
        <hr />






</body>
</html>
