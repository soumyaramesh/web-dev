<!DOCTYPE html>
<html>
<head>
    <title>NodeJS JSON Get, Delete and Post</title>
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <script src="javascript/angular.js"></script>
    <script src="javascript/angular-sanitize.js"></script>
    <script src="javascript/angular-route.js"></script>
    <script src="javascript/angular-route.min.js"></script>
    <script src="javascript/app.js"></script>
    <script src="javascript/services.js"></script>
    <script src="javascript/controller.js"></script>
</head>

<body ng-app="F1FeederApp" ng-controller="driversController" style="background-color: peachpuff">
    
    
        <h1 style="color:palevioletred"> NodeJS JSON Get, Delete and Post</h1>
    <div class="container-fluid" style="border:2px solid; width:700px; height:400px; border-radius:30px">
        <a href="http://nodejs-soumyaramesh.rhcloud.com/exp2.html"> <h4>Click Here to see the Output</h4></a>  </br></br>
        <img src="../images/week6_2.jpg" alt="exp2 Output">
    </div>
        <fieldset>
            <h4>About the Experiment</h4>
            <p>In this experiment, I have stored a list of books as a JSON entity called books. It has the following fields: title, author and chapters. Chapters within itself is a nested JSON entity.
            <p>I have retrieved JSON data and displayed the title and author of each book in the form of a table. I have provided 2 buttons, one to add a new book and another set of buttons to delete each book. To do this, I have used app.delete to splice the books array based on the index of the selected book and used app.post to add a new book to the list of JSON values.</p>

        </fieldset>
        <br />
        
        <h3>Code Snippet:</h3>

        <pre style="background-color:palegoldenrod">
        
        <code>
<strong>server.js</strong>
var bodyParser = require('body-parser');
app.use(bodyParser.json()); // for parsing application/json

app.delete("/book/:id", function (req, res) {
    var index = req.params.id;
    books.splice(index, 1);
    res.json(books);
});
app.post("/book", function (req, res) {
    var obj = req.body;//{ title: "Title", author: "Author" };
    books.push(obj);
    res.json(books);
});

<strong>clientApp.js</strong>
$scope.remove = function (index) {
        $http.delete("/book/" + index)
        .success(function (response) {
            $scope.books = response;
        });
    };
$scope.addBook = function (book) {
        $http.post("/book", book)
        .success(function (response) {
            $scope.books = response;
        });
    }

        </code>
        </pre>
        </p>


        <h4>Description</h4>
        <div style="background-color:beige" class="container-fluid">
            <p>When the X delete button is clicked, the remove handler is called which used to generate a delete using $http.delete which looks for a match in the form of /book/index. If it is a success, the index is used to splice the books array of the book that was clicked to be deleted.</p>
            <p>When the + Add button is clicked, the addBook handler is called which is used to generate a post using $http.post which parses the body to obtain the new object that was entered. To do this, we require "body-parser" and the object is obtained with req.body which is then pushed into books.</p>
            <p>In package.json, we include express and body-parser as a dependencies.</p>

        </div>
        <fieldset>
            <h3>Source Code</h3>
            <a href="../../fileview/Default.aspx?~/experiments/week6/experiment2.htm" target="_blank">experiment2.htm</a><br/>
            <a href="../../fileview/Default.aspx?~/experiments/week6/server.js" target="_blank">server.js</a><br />
            <a href="../../fileview/Default.aspx?~/experiments/week6/clientApp.js" target="_blank">clientApp.js</a>
        </fieldset>
        <fieldset>
            <h3>References</h3>
            <nav>
                <a href="https://www.youtube.com/user/jannunzi" target="_blank">Prof Jose's Lectures</a>
                <br />
            </nav>
        </fieldset>
        <br />

</body>
</html>